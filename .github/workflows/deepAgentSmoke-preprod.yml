name: Deep Agent Smoke Suite - PreProd

on:    
  workflow_dispatch:
    inputs:
      tags:
        description: "Test tag to run (without @)"
        required: false
        type: string

jobs:
  test:
    runs-on: windows-latest
    env:
      # Fixed environment - always preprod
      TEST_ENV: "preprod"
      SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      SLACK_CHANNEL_ID: "C0189FJRC9E"
      FAILURE_SLACK_CHANNEL_ID: "C07FJG27D2L"
      EXECUTION_MODE: "local"
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Debug - Environment Variables
        shell: pwsh
        run: |
          echo "Selected Environment: $env:TEST_ENV"
          echo "Execution Mode: $env:EXECUTION_MODE"

      - name: Install dependencies
        shell: pwsh
        run: |
          # First run npm install to generate package-lock.json if it doesn't exist
          if (-not (Test-Path -Path "package-lock.json")) {
            npm install
          } else {
            npm ci
          }
          npx playwright install --with-deps

      - name: Setup test directories and cleanup
        shell: pwsh
        run: |
          Write-Host "üßπ Setting up test directories and cleaning up..."
          # Create required directories
          $directories = @("reports", "test-reports", "downloadfile", "jsonReport", "llm-judge/results", "urlData")
          foreach ($dir in $directories) {
            if (-not (Test-Path -Path $dir)) {
              New-Item -ItemType Directory -Path $dir -Force
              Write-Host "Created directory: $dir"
            } else {
              Write-Host "Directory already exists: $dir"
            }
          }
          
          # Clean existing reports
          if (Test-Path -Path "reports") {
            Get-ChildItem -Path "reports" -File | Remove-Item -Force
            Write-Host "Cleaned reports directory"
          }
          
          Write-Host "‚úÖ Test environment setup complete"

      - name: Run all tests
        if: ${{ github.event.inputs.tags == '' || github.event_name != 'workflow_dispatch' }}
        shell: pwsh
        run: |
          Write-Host "üöÄ Running smoke tests using npm script..."
          npx cucumber-js --tags "@smoke" --parallel 4 --format html:reports/cucumber-report.html --format json:reports/cucumber-report.json
          $exitCode = $LASTEXITCODE
          Write-Host "Test execution completed with exit code: $exitCode"

          # Generate reports
          npm run report

          # List generated files for debugging
          Write-Host "üìÅ Generated report files:"
          if (Test-Path -Path "reports") {
            Get-ChildItem -Path "reports" -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" }
          }

          exit $exitCode
        env:
          CI: true
          TEST_ENV: ${{ env.TEST_ENV }}
          HEADLESS: true
          EXECUTION_MODE: local

      - name: Run tests with specific tag
        if: ${{ github.event.inputs.tags != '' && github.event_name == 'workflow_dispatch' }}
        shell: pwsh
        run: |
          Write-Host "üöÄ Running tests with tag: @${{ github.event.inputs.tags }}"
          # Use reduced parallelism for better stability
          npx cucumber-js --parallel 6 --tags "@${{ github.event.inputs.tags }}" --format html:reports/cucumber-report.html --format json:reports/cucumber-report.json --format progress
          $exitCode = $LASTEXITCODE
          Write-Host "Test execution completed with exit code: $exitCode"

          # Generate reports
          npm run report

          # List generated files for debugging
          Write-Host "üìÅ Generated report files:"
          if (Test-Path -Path "reports") {
            Get-ChildItem -Path "reports" -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" }
          }

          exit $exitCode
        env:
          CI: true
          TEST_ENV: ${{ env.TEST_ENV }}
          HEADLESS: true
          EXECUTION_MODE: local

      - name: Generate Test Summary Report
        if: always()
        shell: pwsh
        run: |
          if (Test-Path -Path "reports/cucumber-report.json") {
            Write-Host "üìä Generating test summary..."
            node helpers/summarizeResults.js reports/cucumber-report.json
            Write-Host "‚úÖ Test summary generated successfully"
          } else {
            Write-Host "‚ö†Ô∏è Warning: reports/cucumber-report.json not found. Skipping summary generation."
            # List what files are actually present
            Write-Host "Available files in reports directory:"
            if (Test-Path -Path "reports") {
              Get-ChildItem -Path "reports" -Recurse | ForEach-Object { Write-Host "  - $($_.Name)" }
            } else {
              Write-Host "  - reports directory does not exist"
            }
          }

      - name: Report Location Information
        if: always()
        shell: pwsh
        run: |
          Write-Host "`n====" -ForegroundColor Green
          Write-Host "TEST REPORT LOCATIONS:" -ForegroundColor Green
          Write-Host "====" -ForegroundColor Green
          Write-Host "HTML Report: $PWD/test-reports/index.html" -ForegroundColor Cyan
          Write-Host "JSON Report: $PWD/reports/cucumber-report.json" -ForegroundColor Cyan
          Write-Host "Screenshots: $PWD/reports/failure-*.png" -ForegroundColor Cyan
          Write-Host "====`n" -ForegroundColor Green
          
          # Create a marker file with report locations for easy reference
          @"
          TEST REPORT LOCATIONS:
          ====
          HTML Report: $PWD/test-reports/index.html
          JSON Report: $PWD/reports/cucumber-report.json
          Screenshots: $PWD/reports/failure-*.png
          ====
          "@ | Out-File -FilePath "report-locations.txt"

      - name: Debug - List report files
        if: always()
        shell: pwsh
        run: |
          Write-Host "üìÅ Listing all files in reports directory:"
          if (Test-Path -Path "reports") {
            Get-ChildItem -Recurse reports | ForEach-Object { 
              Write-Host "  - $($_.FullName) (Size: $($_.Length) bytes)"
            }
          } else {
            Write-Host "  - reports directory does not exist"
          }
          
          Write-Host "üìÅ Listing all files in test-reports directory:"
          if (Test-Path -Path "test-reports") {
            Get-ChildItem -Recurse test-reports | ForEach-Object { 
              Write-Host "  - $($_.FullName) (Size: $($_.Length) bytes)"
            }
          } else {
            Write-Host "  - test-reports directory does not exist"
          }

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}-${{ env.TEST_ENV }}
          path: |
            reports/**
            test-reports/**
            cucumber-report.html
            cucumber-report.json
            urlData/**
          retention-days: 30
          if-no-files-found: warn
          
      - name: Upload report locations
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-locations-${{ github.run_id }}-${{ env.TEST_ENV }}
          path: report-locations.txt
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload Playwright traces on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces-${{ github.run_id }}-${{ env.TEST_ENV }}
          path: |
            reports/traces/
            reports/screenshots/
            reports/failure-*.png
          retention-days: 30
          if-no-files-found: ignore